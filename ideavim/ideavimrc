""" Map leader to space
let mapleader=" "

""" Plugins
" https://github.com/AlexPl292/IdeaVim-EasyMotion#supported-commands
" Lots of keymaps in URL, based on <leader>+<leader>+...
set easymotion

" https://github.com/tpope/vim-surround
" ys, cs, ds, S
set surround

" https://github.com/terryma/vim-multiple-cursors
" <A-n>, <A-x>, <A-p>, g<A-n>
set multiple-cursors

" https://github.com/tpope/vim-commentary
" gcc, gc + motion, v_gc
set commentary

" https://github.com/vim-scripts/ReplaceWithRegister
" gr, grr
set ReplaceWithRegister

" https://www.vim.org/scripts/script.php?script_id=2699
" Additional text objects: aa, ia
set argtextobj

" https://github.com/kana/vim-textobj-entire
" Additional text objects: ae, ie
set textobj-entire

" https://github.com/tommcdo/vim-exchange
" cx, cxx, X, cxc
set vim-exchange

" https://github.com/machakann/vim-highlightedyank
" if you want to optimize highlight duration, assign a time in milliseconds:
" let g:highlightedyank_highlight_duration = "1000"
" A negative number makes the highlight persistent.
" let g:highlightedyank_highlight_duration = "-1"
" if you want to change background color of highlight you can provide the rgba of the color you want e.g.
" let g:highlightedyank_highlight_color = "rgba(160, 160, 160, 155)"
set highlightedyank


""" Plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>"

""" Common settings -------------------------
set showmode
set showcmd
set number
set scrolloff=5
set hlsearch
set incsearch
set ignorecase
set smartcase

""" Idea specific settings ------------------
set ideajoin

" `idearefactormode` `idearefactormode` String(default "select")
" 
"              Define the mode that would be enabled during
"              the refactoring (renaming, live template, introduce variable, etc)
"              
"              Use one of the following values:
"              - keep  - keep the mode that was enabled before starting a refactoring
"              - select - start refactoring in select mode
"              - visual - start refactoring in visual mode
"              
"              This option has effect if you are in normal, insert or replace mode before refactoring start.
"              Visual or select mode are not changed.
set idearefactormode=keep

set clipboard=ideaput

""" Mappings --------------------------------
" map <leader>f <Plug>(easymotion-s)
" map <leader>e <Plug>(easymotion-f)
" 
" map <leader>d :action Debug<CR>
" map <leader>r :action RenameElement<CR>
" map <leader>c :action Stop<CR>
" map <leader>z :action ToggleDistractionFreeMode<CR>
" 
" map <leader>s :action SelectInProjectView<CR>
" map <leader>a :action Annotate<CR>
" map <leader>h :action Vcs.ShowTabbedFileHistory<CR>
" map <S-Space> :action GotoNextError<CR>
" 
" map <leader>b :action ToggleLineBreakpoint<CR>
" map <leader>o :action FileStructurePopup<CR>


" ------------------------------------------------------------------------------------
" Supported settings
"
" `keymodel`       `km`       String (default "continueselect,stopselect")
" 
"              List of comma separated words, which enable special things that keys
"              can do. These values can be used:
"                startsel           Using a shifted special[1] key starts selection (either
"                                   Select mode or Visual mode, depending on "key" being
"                                   present in 'selectmode').
"                stopsel            Using a NOT-shifted special[1] key stops selection.
"                                   Automatically enables `stopselect` and `stopvisual`
"                stopselect         Using a NOT-shifted special[1] key stops     - IdeaVim ONLY
"                                   select mode and removes selection.
"                stopvisual         Using a NOT-shifted special[1] key stops     - IdeaVim ONLY
"                                   visual mode and removes selection.
"                continueselect     Using a shifted arrow key doesn't       - IdeaVim ONLY
"                                   start selection, but in select mode
"                                   acts like startsel is enabled
"                continuevisual     Using a shifted arrow key doesn't       - IdeaVim ONLY
"                                   start selection, but in visual mode
"                                   acts like startsel is enabled
" 
" 'matchpairs'     'mps'   pairs of characters that "%" can match
" 'more'           'more'  When on, listings pause when the whole screen is filled.
" 'nrformats'      'nf'    number formats recognized for CTRL-A command
" 'scroll'         'scr'   lines to scroll with CTRL-U and CTRL-D
" 'scrolljump'     'sj'    minimum number of lines to scroll
" 'selection'      'sel'   what type of selection to use
" 
" `selectmode`     `slm`   String (default "")
" 
"              This is a comma-separated list of words, which specify when to start
"              Select mode instead of Visual mode, when a selection is started.
"              Possible values:
"                mouse           when using the mouse
"                key             when using shifted special[1] keys
"                cmd             when using "v", "V", or <C-V>
"                ideaselection   when IDE sets a selection      - IdeaVim ONLY
"                                (examples: extend selection, wrap with while, etc.)
" 
" 'sidescroll'     'ss'        minimum number of columns to scroll horizontally
" 'sidescrolloff'  'siso'      min. number of columns to left and right of cursor
" 'timeout'        'to'        use timeout for mapped key sequences
" 'timeoutlen'     'tm'        timeout duration for a mapped key sequence
" 'undolevels'     'ul'        maximum number of changes that can be undone
" 'viminfo'        'vi'        information to remember after restart
" 'visualbell'     'vb'        use visual bell instead of beeping
" 'wrapscan'       'ws'        searches wrap around the end of file
" 
" 
" 
" IdeaVim only commands:
" 
" 
" 
" `ideajoin`      `ideajoin` Boolean (default false)
" 
"               If true, join command will be performed via IDE
"               See wiki/`ideajoin` examples
"
" `ideawrite`     `ideawrite` String (default "all") [To Be Released]
"               "file" or "all". Defines the behaviour of ":w" command.
"               Value "all" enables execution of ":wa" (save all) command on ":w" (save).
"               This feature exists because some IJ options like "Prettier on save" or "ESlint on save"
"                    work only with "save all" action. If this option is set to "all", these actions work
"                    also with ":w" command.
"               
" `lookupkeys`    `lookupkeys`   List of strings
" 
"               List of keys that should be processed by the IDE during the active lookup (autocompletion).
"               For example, <Tab> and <Enter> are used by the IDE to finish the lookup,
"                     but <C-W> should be passed to IdeaVim.
"               Default value: 
"                     "<Tab>", "<Down>", "<Up>", "<Enter>", "<Left>", "<Right>",
"                     "<C-Down>", "<C-Up>", "<PageUp>", "<PageDown>",
"                     "<C-J>", "<C-Q>"
" 
" ----------
" [1] - cursor keys, <End>, <Home>, <PageUp> and <PageDown>


